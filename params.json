{"name":"MonoTouch-Pixate","tagline":"","body":"MonoTouch-Pixate\r\n================\r\n\r\nTo demonstrate the use of Pixate within MonoTouch, we'll be using Xamarin's MonoDevelop IDE. Let's get started by creating a new solution. We'll start with creating a C# -> MonoTouch -> Single View Application solution:\r\n\r\n![Single View Application](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/single_view_application.png)\r\n\r\nName your project and click 'OK'.\r\n\r\n## Adding the Pixate Library\r\n\r\nNow right-click on your project's References folder in the Solution view and select 'Edit References...'.\r\n\r\n![Add Native Ref](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/edit_reference.png)\r\n\r\nNow add the `Pixate.dll` file that you can [download from here](http://www.pixate.com/prerelease/engine/ios/PixateDLL-1.0RC3.zip) if you don't already have it.  You can also [build the DLL](#pixatedll-build-instructions) yourself.\r\n\r\nThe dialog should look something like this:\r\n\r\n![Add Native Ref](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/add_pixate_dll.png)\r\n\r\n## Adding a CSS File\r\n\r\nNow right-click on your project again in the Solution view and select Add -> New File. Choose 'Misc' from the list on the left, and 'Empty Text File' from the list in the middle. Name your file 'default.css'.\r\n\r\n![Add CSS File](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/add_css_file.png)\r\n\r\nRight-click on the `default.css` file you added and select the 'Properties' menu item. Over on the Properties panel, change 'Build action' to be 'Content'.\r\n\r\n![Default to Content](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/default_to_content.png)\r\n\r\n## Setting up for Styling\r\n\r\nAt this point, let's add a button or two to our application. Double-click on the .xib file for your project (e.g. <ProjectName>ViewController.xib). Add a couple of buttons like the following:\r\n\t\r\n![Two Buttons](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/two_buttons.png)\r\n\t\r\nWith each of the new buttons you added, select one, activate the Identity Inspector in the Utilities View. \r\n\r\nNow we need to give the buttons a \"styleId\" so that you can reference it from your CSS. We'll add a Runtime Attribute. Click the small '+' and add an entry with a key path of `styleId`, a type of `String`, and a value of `button1`. For the second button add a `styleId`, a type of `String`, and a value of `button2`.\r\n\r\n![Runtime Attribute](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/styleId.png)\r\n\r\nNow save and close Xcode. \r\n\r\n## Set up the Pixate license\r\n\r\nAt the top of your Main.cs file, add this import line:\r\n\r\n```csharp\r\n\tusing PixateLib;\r\n```\r\n\r\nThen, at the beginning of your Main method, add this line:\r\n\r\n```csharp\r\n\tPXEngine.LicenseKeyForUser(\"SERIAL NUMBER\", \"USER NAME\");\r\n```\r\n\r\nBe sure to replace *SERIAL NUMBER* and *USER NAME* with your licensing information. If you do not have a license and wish to run in free mode, you will still need this line of code. Simply replace *SERIAL NUMBER* and *USER NAME* with empty strings.\r\n\r\nBefore we style the buttons, go ahead and run the project in MonoDevelop. It should look something like this:\r\n\r\n![Buttons Runs](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/buttons_run.png)\r\n\r\n## Styling the Buttons\r\n\r\nNow comes the easy part, just open your default.css file and add some CSS. For our two buttons, let's try something simple:\r\n\r\n```css\r\n\t#button1 {\r\n\t\tbackground-color : yellow;\r\n\t\tborder-width     : 2px;\r\n\t\tborder-color     : black;\r\n\t\tborder-radius    : 8px;\r\n\t}\r\n\t#button2 {\r\n\t\tbackground-color : gray;\r\n\t\tborder-width     : 2px;\r\n\t\tborder-color     : black;\r\n\t\tborder-radius    : 8px;\r\n\t}\r\n```\t\r\n\r\n## First Styled App\r\n\r\nNow Run your project. Your buttons should look like this:\r\n\r\n![Styled Buttons](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/styled_buttons.png)\r\n\r\nHere's some slightly fancier styling you can try:\r\n\r\n```css\r\n\t#button1 {\r\n\t  border-radius    : 5px;\r\n\t  font-family      : \"American Typewriter\";\r\n\t  font-size        : 13px;\r\n\t  font-weight      : bold;\r\n\t  text-transform   : uppercase;\r\n\t  letter-spacing   : 0.75px;\r\n\t  color            : #ffffff;\r\n\t  background-color : #008ed4;\r\n\t}\r\n\t#button2 {\r\n\t  color            : #446620;\r\n\t  background-color : linear-gradient(#87c44a, #b4da77);\r\n\t  border-width     : 1px;\r\n\t  border-color     : #84a254;\r\n\t  border-radius    : 10px;\r\n\t  font-size        : 13px;\r\n\t}\r\n```\r\n\r\nNow you'll get pretty buttons like this:\r\n\r\n![Pretty Buttons](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/pretty_buttons.png)\r\n\r\nCoding Your UI\r\n--------------\r\n\r\nIf you programmatically create your UI, this library [*will soon*] support the full API from the [Pixate Dev Reference](http://www.pixate.com/documentation.html). In addition, the following three methods are provided to set ID, Class, and CSS on your controls/views:\r\n\r\n```csharp\r\n\tview.SetStyleId(\"StyleID\");\r\n\tview.SetStyleClass(\"StyleClass\");\r\n\tview.SetStyleCSS(\"StyleCSS\");\r\n```\r\n\t\r\nFor example, here's some code that creates 3 buttons, each with a unique ID, all three with the same Class, and the third styled inline with CSS:\r\n\r\n```csharp\r\n\tbutton1 = UIButton.FromType(UIButtonType.RoundedRect);\r\n\tbutton1.Frame = new RectangleF(50, 20, 200, 40);\r\n\tbutton1.SetTitle(\"#myButton1 .allButtons\", UIControlState.Normal);\r\n\tbutton1.SetStyleId(\"myButton1\");\r\n\tbutton1.SetStyleClass(\"allButtons\");\r\n\r\n\tbutton2 = UIButton.FromType(UIButtonType.RoundedRect);\r\n\tbutton2.Frame = new RectangleF(50, 70, 200, 40);\r\n\tbutton2.SetTitle(\"#myButton2 .allButtons\", UIControlState.Normal);\r\n\tbutton2.SetStyleId(\"myButton2\");\r\n\tbutton2.SetStyleClass(\"allButtons\");\r\n\r\n\tbutton3 = UIButton.FromType(UIButtonType.RoundedRect);\r\n\tbutton3.Frame = new RectangleF(50, 120, 200, 40);\r\n\tbutton3.SetTitle(\"#myButton3 .allButtons\", UIControlState.Normal);\r\n\tbutton3.SetStyleId(\"myButton3\");\r\n\tbutton3.SetStyleClass(\"allButtons\");\r\n\r\n\tbutton3.SetStyleCSS(\"background-color: green; border-radius: 5;\");\r\n```\r\n\r\nThe CSS for these three buttons could be:\r\n\r\n```css\r\n\t.allButtons {\r\n\t border-radius: 5;\r\n\t}\r\n\r\n\t#myButton1 {\r\n\t background-color: yellow;\r\n\t border-color: black;\r\n\t border-width: 2;\r\n\t}\r\n\r\n\t#myButton2 {\r\n\t background-color: blue;\r\n\t border-color: yellow;\r\n\t border-width: 2;\r\n\t}\r\n\t\r\n```\r\n\r\nAnd you would get something like this:\r\n\r\n![](https://raw.github.com/Pixate/MonoTouch-Pixate/master/Screenshots/monotouch-sample1.png)\r\n\r\n## License\r\n\r\nThe Pixate Engine runtime included here is for demonstrations / trial use only. Please visit [Pixate.com](http://www.pixate.com) for licensing information.\r\n\r\nLicense for the included Demos is available in the accompanying [LICENSE.md](https://github.com/Pixate/MonoTouch-Pixate/blob/master/LICENSE.md) file.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}